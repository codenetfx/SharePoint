//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SAPLookupTableService.EngagementsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/KPMG.Engagements.EngagementsService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EngagementsService.IEngagementsService")]
    public interface IEngagementsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetData", ReplyAction="http://tempuri.org/IEngagementsService/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetData", ReplyAction="http://tempuri.org/IEngagementsService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IEngagementsService/GetDataUsingDataContractResponse")]
        SAPLookupTableService.EngagementsService.CompositeType GetDataUsingDataContract(SAPLookupTableService.EngagementsService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IEngagementsService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SAPLookupTableService.EngagementsService.CompositeType> GetDataUsingDataContractAsync(SAPLookupTableService.EngagementsService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateNewEngagementSite", ReplyAction="http://tempuri.org/IEngagementsService/CreateNewEngagementSiteResponse")]
        string CreateNewEngagementSite(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateNewEngagementSite", ReplyAction="http://tempuri.org/IEngagementsService/CreateNewEngagementSiteResponse")]
        System.Threading.Tasks.Task<string> CreateNewEngagementSiteAsync(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/UpdateEngagementSiteProperties", ReplyAction="http://tempuri.org/IEngagementsService/UpdateEngagementSitePropertiesResponse")]
        string UpdateEngagementSiteProperties(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/UpdateEngagementSiteProperties", ReplyAction="http://tempuri.org/IEngagementsService/UpdateEngagementSitePropertiesResponse")]
        System.Threading.Tasks.Task<string> UpdateEngagementSitePropertiesAsync(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetEngagementStatus", ReplyAction="http://tempuri.org/IEngagementsService/GetEngagementStatusResponse")]
        string GetEngagementStatus(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/GetEngagementStatus", ReplyAction="http://tempuri.org/IEngagementsService/GetEngagementStatusResponse")]
        System.Threading.Tasks.Task<string> GetEngagementStatusAsync(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CloseEngagement", ReplyAction="http://tempuri.org/IEngagementsService/CloseEngagementResponse")]
        string CloseEngagement(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CloseEngagement", ReplyAction="http://tempuri.org/IEngagementsService/CloseEngagementResponse")]
        System.Threading.Tasks.Task<string> CloseEngagementAsync(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/ReopenEngagement", ReplyAction="http://tempuri.org/IEngagementsService/ReopenEngagementResponse")]
        string ReopenEngagement(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/ReopenEngagement", ReplyAction="http://tempuri.org/IEngagementsService/ReopenEngagementResponse")]
        System.Threading.Tasks.Task<string> ReopenEngagementAsync(string engagementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateNewOpportunitySite", ReplyAction="http://tempuri.org/IEngagementsService/CreateNewOpportunitySiteResponse")]
        string CreateNewOpportunitySite(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateNewOpportunitySite", ReplyAction="http://tempuri.org/IEngagementsService/CreateNewOpportunitySiteResponse")]
        System.Threading.Tasks.Task<string> CreateNewOpportunitySiteAsync(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/UpdateOpportunitySiteProperties", ReplyAction="http://tempuri.org/IEngagementsService/UpdateOpportunitySitePropertiesResponse")]
        string UpdateOpportunitySiteProperties(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/UpdateOpportunitySiteProperties", ReplyAction="http://tempuri.org/IEngagementsService/UpdateOpportunitySitePropertiesResponse")]
        System.Threading.Tasks.Task<string> UpdateOpportunitySitePropertiesAsync(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateEngagementFromOpportunity", ReplyAction="http://tempuri.org/IEngagementsService/CreateEngagementFromOpportunityResponse")]
        string CreateEngagementFromOpportunity(string opportunityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngagementsService/CreateEngagementFromOpportunity", ReplyAction="http://tempuri.org/IEngagementsService/CreateEngagementFromOpportunityResponse")]
        System.Threading.Tasks.Task<string> CreateEngagementFromOpportunityAsync(string opportunityId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEngagementsServiceChannel : SAPLookupTableService.EngagementsService.IEngagementsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EngagementsServiceClient : System.ServiceModel.ClientBase<SAPLookupTableService.EngagementsService.IEngagementsService>, SAPLookupTableService.EngagementsService.IEngagementsService {
        
        public EngagementsServiceClient() {
        }
        
        public EngagementsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EngagementsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EngagementsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EngagementsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public SAPLookupTableService.EngagementsService.CompositeType GetDataUsingDataContract(SAPLookupTableService.EngagementsService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<SAPLookupTableService.EngagementsService.CompositeType> GetDataUsingDataContractAsync(SAPLookupTableService.EngagementsService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string CreateNewEngagementSite(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties) {
            return base.Channel.CreateNewEngagementSite(opportunityId, engagementId, manager, partner, engagementProperties);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewEngagementSiteAsync(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties) {
            return base.Channel.CreateNewEngagementSiteAsync(opportunityId, engagementId, manager, partner, engagementProperties);
        }
        
        public string UpdateEngagementSiteProperties(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties) {
            return base.Channel.UpdateEngagementSiteProperties(opportunityId, engagementId, manager, partner, engagementProperties);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEngagementSitePropertiesAsync(string opportunityId, string engagementId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> engagementProperties) {
            return base.Channel.UpdateEngagementSitePropertiesAsync(opportunityId, engagementId, manager, partner, engagementProperties);
        }
        
        public string GetEngagementStatus(string engagementId) {
            return base.Channel.GetEngagementStatus(engagementId);
        }
        
        public System.Threading.Tasks.Task<string> GetEngagementStatusAsync(string engagementId) {
            return base.Channel.GetEngagementStatusAsync(engagementId);
        }
        
        public string CloseEngagement(string engagementId) {
            return base.Channel.CloseEngagement(engagementId);
        }
        
        public System.Threading.Tasks.Task<string> CloseEngagementAsync(string engagementId) {
            return base.Channel.CloseEngagementAsync(engagementId);
        }
        
        public string ReopenEngagement(string engagementId) {
            return base.Channel.ReopenEngagement(engagementId);
        }
        
        public System.Threading.Tasks.Task<string> ReopenEngagementAsync(string engagementId) {
            return base.Channel.ReopenEngagementAsync(engagementId);
        }
        
        public string CreateNewOpportunitySite(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties) {
            return base.Channel.CreateNewOpportunitySite(opportunityId, manager, partner, opportunityProperties);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewOpportunitySiteAsync(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties) {
            return base.Channel.CreateNewOpportunitySiteAsync(opportunityId, manager, partner, opportunityProperties);
        }
        
        public string UpdateOpportunitySiteProperties(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties) {
            return base.Channel.UpdateOpportunitySiteProperties(opportunityId, manager, partner, opportunityProperties);
        }
        
        public System.Threading.Tasks.Task<string> UpdateOpportunitySitePropertiesAsync(string opportunityId, string manager, string partner, System.Collections.Generic.Dictionary<string, object> opportunityProperties) {
            return base.Channel.UpdateOpportunitySitePropertiesAsync(opportunityId, manager, partner, opportunityProperties);
        }
        
        public string CreateEngagementFromOpportunity(string opportunityId) {
            return base.Channel.CreateEngagementFromOpportunity(opportunityId);
        }
        
        public System.Threading.Tasks.Task<string> CreateEngagementFromOpportunityAsync(string opportunityId) {
            return base.Channel.CreateEngagementFromOpportunityAsync(opportunityId);
        }
    }
}
